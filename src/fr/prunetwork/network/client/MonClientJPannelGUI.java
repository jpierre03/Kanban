package fr.prunetwork.network.client;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;

/**
 * Panel de l'IHM de controle du client TCP/IP
 * @author jpierre03
 */
public class MonClientJPannelGUI extends javax.swing.JPanel {

    /**on en crée un et on ne le detruit jamais*/
    private static JFileChooser choisiFichier = new JFileChooser("Choisissez un fichier");
    /**
     *
     */
    private static final long serialVersionUID = 1L;
    /**
     *
     */
    private boolean DEBUG = true;
    /**
     *
     */
    MonClient monClient = null;
    /**
     *
     */
    String adresseServeur = null;
    /**
     *
     */
    int portServeur = 0;
    /**
     *
     */
    ThreadLireServeur monThreadLireServeur = null;

    /** Creates new form MonClientJPannelGUI */
    public MonClientJPannelGUI() {
        initComponents();
//        lireServeur();
    }

    /**
     * Création d'un Thread de  lecture des messages émis par le serveur.
     */
    private void lireServeur() {
        if (monThreadLireServeur == null) {
            monThreadLireServeur = new ThreadLireServeur();
            monThreadLireServeur.start();
        }
    }

    /**
     * Arrêt du Thread de lecture du Serveur.
     */
    private void arretlireServeur() {
        if (monThreadLireServeur != null) {
            monThreadLireServeur.arret();
            monThreadLireServeur = null;
        }
    }

    /**
     *
     */
    public void arret() {
        this.arretlireServeur();
        this.monClient.fermer();
    }

    /**
     *
     */
    public void ouvrirFichier() {
        ouvrirJButtonActionPerformed(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        espaceFichierJPanel = new javax.swing.JPanel();
        fichierJLabel = new javax.swing.JLabel();
        fichierjScrollPane = new javax.swing.JScrollPane();
        fichierJTextArea = new javax.swing.JTextArea();
        nomFichierJLabel = new javax.swing.JLabel();
        ouvrirJButton = new javax.swing.JButton();
        parametresJPanel = new javax.swing.JPanel();
        adresseIPJLabel = new javax.swing.JLabel();
        adresseIPJTextField = new javax.swing.JTextField();
        portJLabel = new javax.swing.JLabel();
        portJTextField = new javax.swing.JTextField();
        bouttonsJPanel = new javax.swing.JPanel();
        connexionJButton = new javax.swing.JButton();
        terminerJButton = new javax.swing.JButton();
        envoyerJButton = new javax.swing.JButton();
        messageJPanel = new javax.swing.JPanel();
        clientjLabelJ = new javax.swing.JLabel();
        serveurJLabel = new javax.swing.JLabel();
        separateurJSplitPane = new javax.swing.JSplitPane();
        clientJScrollPane = new javax.swing.JScrollPane();
        clientJTextArea = new javax.swing.JTextArea();
        serveurJScrollPane = new javax.swing.JScrollPane();
        serveurJTextArea = new javax.swing.JTextArea();

        fichierJLabel.setText("Fichier : ");

        fichierJTextArea.setColumns(20);
        fichierJTextArea.setRows(5);
        fichierjScrollPane.setViewportView(fichierJTextArea);

        nomFichierJLabel.setText("nom du fichier");

        ouvrirJButton.setText("Ouvrir Fichier");
        ouvrirJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ouvrirJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout espaceFichierJPanelLayout = new javax.swing.GroupLayout(espaceFichierJPanel);
        espaceFichierJPanel.setLayout(espaceFichierJPanelLayout);
        espaceFichierJPanelLayout.setHorizontalGroup(
            espaceFichierJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(espaceFichierJPanelLayout.createSequentialGroup()
                .addGroup(espaceFichierJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(espaceFichierJPanelLayout.createSequentialGroup()
                        .addComponent(fichierJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nomFichierJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 321, Short.MAX_VALUE)
                        .addComponent(ouvrirJButton))
                    .addGroup(espaceFichierJPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(fichierjScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)))
                .addContainerGap())
        );
        espaceFichierJPanelLayout.setVerticalGroup(
            espaceFichierJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(espaceFichierJPanelLayout.createSequentialGroup()
                .addGroup(espaceFichierJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fichierJLabel)
                    .addComponent(nomFichierJLabel)
                    .addComponent(ouvrirJButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fichierjScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                .addContainerGap())
        );

        adresseIPJLabel.setText("Adresse du Serveur :");

        adresseIPJTextField.setText("localhost");
        adresseIPJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adresseIPJTextFieldActionPerformed(evt);
            }
        });

        portJLabel.setText("Port :");

        portJTextField.setText("2222");
        portJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portJTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout parametresJPanelLayout = new javax.swing.GroupLayout(parametresJPanel);
        parametresJPanel.setLayout(parametresJPanelLayout);
        parametresJPanelLayout.setHorizontalGroup(
            parametresJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parametresJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(adresseIPJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(adresseIPJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(portJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(portJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        parametresJPanelLayout.setVerticalGroup(
            parametresJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parametresJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(parametresJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(parametresJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(portJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(portJLabel))
                    .addGroup(parametresJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(adresseIPJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(adresseIPJLabel)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        connexionJButton.setText("Connexion");
        connexionJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connexionJButtonActionPerformed(evt);
            }
        });

        terminerJButton.setText("Terminer");
        terminerJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                terminerJButtonActionPerformed(evt);
            }
        });

        envoyerJButton.setText("Envoyer");
        envoyerJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                envoyerJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bouttonsJPanelLayout = new javax.swing.GroupLayout(bouttonsJPanel);
        bouttonsJPanel.setLayout(bouttonsJPanelLayout);
        bouttonsJPanelLayout.setHorizontalGroup(
            bouttonsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bouttonsJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(connexionJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(envoyerJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(terminerJButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        bouttonsJPanelLayout.setVerticalGroup(
            bouttonsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bouttonsJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bouttonsJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connexionJButton)
                    .addComponent(envoyerJButton)
                    .addComponent(terminerJButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        clientjLabelJ.setText("Client :");

        serveurJLabel.setText("Serveur :");

        separateurJSplitPane.setAutoscrolls(true);
        separateurJSplitPane.setContinuousLayout(true);
        separateurJSplitPane.setDoubleBuffered(true);
        separateurJSplitPane.setPreferredSize(new java.awt.Dimension(450, 70));

        clientJTextArea.setColumns(20);
        clientJTextArea.setRows(5);
        clientJScrollPane.setViewportView(clientJTextArea);

        separateurJSplitPane.setLeftComponent(clientJScrollPane);

        serveurJTextArea.setColumns(20);
        serveurJTextArea.setRows(5);
        serveurJScrollPane.setViewportView(serveurJTextArea);

        separateurJSplitPane.setRightComponent(serveurJScrollPane);

        javax.swing.GroupLayout messageJPanelLayout = new javax.swing.GroupLayout(messageJPanel);
        messageJPanel.setLayout(messageJPanelLayout);
        messageJPanelLayout.setHorizontalGroup(
            messageJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(messageJPanelLayout.createSequentialGroup()
                .addComponent(clientjLabelJ)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 471, Short.MAX_VALUE)
                .addComponent(serveurJLabel))
            .addComponent(separateurJSplitPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
        );
        messageJPanelLayout.setVerticalGroup(
            messageJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(messageJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(messageJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clientjLabelJ)
                    .addComponent(serveurJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(separateurJSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(espaceFichierJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(parametresJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bouttonsJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(messageJPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bouttonsJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(parametresJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(messageJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(espaceFichierJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     *
     * @param evt
     */
    private void terminerJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_terminerJButtonActionPerformed
        if (monClient != null) {                                                //si un client est enregistré
            arretlireServeur();                                                 //demmande au thread de s'arreter (non bloquant)
            monThreadLireServeur = null;
            monClient.fermer();                                                 // fermeture propre
            monClient = null;                                                   //positionnement pour le passage du GC
        }
    }//GEN-LAST:event_terminerJButtonActionPerformed

    /**
     *
     * @param evt
     */
    private void adresseIPJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adresseIPJTextFieldActionPerformed
        adresseServeur = adresseIPJTextField.getText();
    }//GEN-LAST:event_adresseIPJTextFieldActionPerformed

    /**
     *
     * @param evt
     */
    private void portJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portJTextFieldActionPerformed
        portServeur = Integer.parseInt(portJTextField.getText());
    }//GEN-LAST:event_portJTextFieldActionPerformed

    /**
     *
     * @param evt
     */
    private void connexionJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connexionJButtonActionPerformed
        if (monClient == null) {                                                //si un client est enregistré
            try {
                serveurJTextArea.setText("");
                clientJTextArea.setText("");
                monClient = new MonClient(adresseServeur, portServeur);         // création d'un client (code de gestion)
                lireServeur();                                                  //lancement du thread de lecture du serveur
            } catch (IOException ex) {
                Logger.getLogger(MonClientJPannelGUI.class.getName()).log(Level.SEVERE, null, ex);
                System.err.println("Erreur de création de MonClient(" + adresseServeur + "," + portServeur + ")");
            }
        } else {
            System.err.println("monClient est déjà associé à un client");
        }
    }//GEN-LAST:event_connexionJButtonActionPerformed

    /**
     *
     * @param evt
     */
    private void envoyerJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_envoyerJButtonActionPerformed
        if (monClient != null && monClient.estConnect()) {                      //si un client est enregistré ET connecté
            //monClient.ecrireServeur(new String(clientJTextArea.getText()));
            final JTextArea maZoneDeTextePourEnvois = clientJTextArea;
            new Thread() {                                                       //création Thread anonyme

                @Override
                public void run() {
                    monClient.ecrireServeur(clientJTextArea.getText());         //ecrire le contenu de la zone de texte
                    monClient.ecrireServeur("msg envoye");
                    maZoneDeTextePourEnvois.setText("");
                }
            }.start();                                                          //lancement du thread
            //clientJTextArea.setText("");
        }

    }//GEN-LAST:event_envoyerJButtonActionPerformed

    /**
     *
     * @param evt
     */
    private void ouvrirJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ouvrirJButtonActionPerformed
        System.out.println("ouvrirFichierMenuItemActionPerformed");
        choisiFichier = new JFileChooser("Sélection d'un fichier");               //Fenêtre de choix de fichier
        //choisiFichier.setCurrentDirectory(new File("~"));
        choisiFichier.setVisible(true);
        //choisiFichier.setCurrentDirectory(new File("~"));
        int res = choisiFichier.showOpenDialog(this);
        if (res == JFileChooser.APPROVE_OPTION) {
            final String nomFichier = choisiFichier.getSelectedFile().getName();//réécupère le nom du fichier choisi
            System.out.println("On a choisit :" + nomFichier);
            nomFichierJLabel.setText(choisiFichier.getSelectedFile().getAbsolutePath());
            // la lecture peut prendre du temps, on la met dans un thread
            // hors de la boucle Swing (pour eviter de ralentir l'interface)
            Thread runner = new Thread() {                                  // Thread de lecture du fichier

                @Override
                public void run() {// Ce qui sera realise par le Thread
                    if (!SwingUtilities.isEventDispatchThread()) {
                        // Pour info : verifie que le thread cree est bien en dehors de la boucle d'evenements
                        //File toto=boiteLecture.getSelectedFile();
                        BufferedReader reader = null;
                        try {
                            reader = new BufferedReader(
                                    new FileReader(
                                    choisiFichier.getSelectedFile()));
                            fichierJTextArea.read(reader, "");
                        } catch (FileNotFoundException ex) {
                        } catch (IOException ex) {
                        } finally {
                            try {
                                reader.close();
                            } catch (IOException ex) {
                            }
                        }
                    }
                }
            };
            runner.start();
        } else if (res == JFileChooser.CANCEL_OPTION) {
            System.out.println("Opération annulée !");
        }
    }//GEN-LAST:event_ouvrirJButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel adresseIPJLabel;
    private javax.swing.JTextField adresseIPJTextField;
    private javax.swing.JPanel bouttonsJPanel;
    private javax.swing.JScrollPane clientJScrollPane;
    private javax.swing.JTextArea clientJTextArea;
    private javax.swing.JLabel clientjLabelJ;
    private javax.swing.JButton connexionJButton;
    private javax.swing.JButton envoyerJButton;
    private javax.swing.JPanel espaceFichierJPanel;
    private javax.swing.JLabel fichierJLabel;
    private javax.swing.JTextArea fichierJTextArea;
    private javax.swing.JScrollPane fichierjScrollPane;
    private javax.swing.JPanel messageJPanel;
    private javax.swing.JLabel nomFichierJLabel;
    private javax.swing.JButton ouvrirJButton;
    private javax.swing.JPanel parametresJPanel;
    private javax.swing.JLabel portJLabel;
    private javax.swing.JTextField portJTextField;
    private javax.swing.JSplitPane separateurJSplitPane;
    private javax.swing.JLabel serveurJLabel;
    private javax.swing.JScrollPane serveurJScrollPane;
    private javax.swing.JTextArea serveurJTextArea;
    private javax.swing.JButton terminerJButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Lecture en boucle des messages envoyés par le serveur
     *
     */
    class ThreadLireServeur extends Thread {

        /**
         *
         */
        public ThreadLireServeur() {
        }
        /**
         *
         */
        private boolean stopThread = false;
        /**
         *
         */
        private boolean onContinue = true;

        /**
         *
         */
        @Override
        public void run() {
            while (onContinue) {
                try {
                    if (DEBUG) {
                        System.err.println("ThreadLireServeur - onContinue");
                    }
                    if (monClient != null) {
                        String message = monClient.lireServeur();
                        if (message != null) {
                            serveurJTextArea.append("\r\n" + message);
                            if (DEBUG) {
                                System.out.println("************* : " + message);
                            }
                        }
                    }
                    testFin();
                    sleep(0, 10 * 1000);//attente de x ms
                } catch (InterruptedException e) {
                    onContinue = false;
                } catch (Exception e) {
                    //onContinue = false;
                }
            }
            if (DEBUG) {
                System.err.println("ThreadLireServeur - !onContinue");
            }
        }

        /**
         *
         * @throws InterruptedException
         */
        public synchronized void testFin() throws InterruptedException {
            if (stopThread) {
                if (DEBUG) {
                    System.err.println("ThreadLireServeur - throw InterruptedException");
                }
                onContinue = false;
                throw new InterruptedException();
            }
        }

        /**
         *
         */
        public synchronized void arret() {
            stopThread = true;
            if (DEBUG) {
                System.err.println("ThreadLireServeur -  arret()");
            }
        }
    }
}

