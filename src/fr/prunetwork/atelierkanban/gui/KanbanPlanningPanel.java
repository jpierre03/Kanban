/*
 * Copyright (C) 2010-2012 Jean-Pierre PRUNARET
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package fr.prunetwork.atelierkanban.gui;

import fr.prunetwork.atelierkanban.entities.KanbanPlanning;
import fr.prunetwork.atelierkanban.event.Event;
import fr.prunetwork.atelierkanban.event.EventDispatcher;
import fr.prunetwork.atelierkanban.event.kanban.*;
import fr.prunetwork.atelierkanban.event.kanban.index.AbstractKanbanIndexEvent;
import fr.prunetwork.atelierkanban.event.kanban.index.KanbanBlueIndexChanged;
import fr.prunetwork.atelierkanban.event.kanban.index.KanbanGreenIndexChanged;
import fr.prunetwork.atelierkanban.event.kanban.index.KanbanRedIndexChanged;
import fr.prunetwork.patterns.observer.Observer;

/** @author Jean-Pierre Prunaret (jpierre03+AtelierKanban@prunetwork.fr) */
public final class KanbanPlanningPanel
		extends javax.swing.JPanel
		implements Observer {

	private static final long serialVersionUID = 2010091028L;
	private KanbanPlanning kp;

	/** Creates new form KanbanPlanning */
	public KanbanPlanningPanel() {
		initComponents();
		kp = new KanbanPlanning(6, 3, 15, 1);

		redSpinner.setValue(kp.getUpperLevel_redIndex());
		greenSpinner.setValue(kp.getLowerLevel_greenIndex());
		totalKanbanSpinner.setValue(kp.getMaxKanban_blueIndex());

		kanbanEditorPane.setContentType("text/html");

		refresh();
	}

	public void refresh() {
		kanbanEditorPane.setText(getKp().toHtml());
	}

	public String getProductName() {
		return getKp().getProductName();
	}

	public void setProductName(String productName) {
		productNameTextField.setText(productName);
		getKp().setProductName(productName);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;

		kanbanScrollPane = new javax.swing.JScrollPane();
		kanbanEditorPane = new javax.swing.JEditorPane();
		addButton = new javax.swing.JButton();
		removeButton = new javax.swing.JButton();
		greenSpinner = new javax.swing.JSpinner();
		redSpinner = new javax.swing.JSpinner();
		totalKanbanSpinner = new javax.swing.JSpinner();
		productNameTextField = new javax.swing.JTextField();
		productNameLabel = new javax.swing.JLabel();
		productNameButton = new javax.swing.JButton();

		setLayout(new java.awt.GridBagLayout());

		kanbanEditorPane.setContentType("text/html");
		kanbanEditorPane.setEditable(false);
		kanbanEditorPane.setText(
				"a<br>\nb<br>\nc<br>\nd<br>\ne<br>\nf<br>\ng<br>\nh<br>\ni<br>\nj<br>\nk<br>\nl<br>\nm<br>");
		kanbanEditorPane.setOpaque(false);
		kanbanScrollPane.setViewportView(kanbanEditorPane);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.gridwidth = 3;
		gridBagConstraints.gridheight = 12;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		add(kanbanScrollPane, gridBagConstraints);

		addButton.setText("Add");
		addButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				addButtonActionPerformed(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
		add(addButton, gridBagConstraints);

		removeButton.setText("Remove");
		removeButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				removeButtonActionPerformed(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		add(removeButton, gridBagConstraints);

		greenSpinner.setToolTipText("Green Index");
		greenSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				greenSpinnerStateChanged(evt);
			}
		});
		greenSpinner.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
			public void propertyChange(java.beans.PropertyChangeEvent evt) {
				greenSpinnerPropertyChange(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 15;
		add(greenSpinner, gridBagConstraints);

		redSpinner.setToolTipText("Red Index");
		redSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				redSpinnerStateChanged(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 15;
		add(redSpinner, gridBagConstraints);

		totalKanbanSpinner.setToolTipText("Total Kanban");
		totalKanbanSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				totalKanbanSpinnerStateChanged(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 15;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
		add(totalKanbanSpinner, gridBagConstraints);

		productNameTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
		productNameTextField.setToolTipText("Product/Operation name");
		productNameTextField.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				productNameTextFieldActionPerformed(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		add(productNameTextField, gridBagConstraints);

		productNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		productNameLabel.setLabelFor(productNameTextField);
		productNameLabel.setText("Product Name");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridwidth = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		add(productNameLabel, gridBagConstraints);

		productNameButton.setText("Validate");
		productNameButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				productNameButtonActionPerformed(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		add(productNameButton, gridBagConstraints);
	}// </editor-fold>//GEN-END:initComponents

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed

		AbstractKanbanEvent event = new KanbanAdd();
		event.setProductName(getProductName());
		EventDispatcher.getEventDispatcher().notifyObservers(event);

		refresh();

		event = new KanbanAdded(getKp().getCurrentKanbanCount());
		event.setProductName(getProductName());
		EventDispatcher.getEventDispatcher().notifyObservers(event);
	}//GEN-LAST:event_addButtonActionPerformed

	private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
		AbstractKanbanEvent event = new KanbanRemove();
		event.setProductName(getProductName());
		EventDispatcher.getEventDispatcher().notifyObservers(event);

		refresh();

		event = new KanbanRemoved(getKp().getCurrentKanbanCount());
		event.setProductName(getProductName());
		EventDispatcher.getEventDispatcher().notifyObservers(event);
	}//GEN-LAST:event_removeButtonActionPerformed

	private void greenSpinnerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_greenSpinnerPropertyChange
//
	}//GEN-LAST:event_greenSpinnerPropertyChange

	private void greenSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_greenSpinnerStateChanged
		getKp().setLowerLevel_green((Integer) greenSpinner.getValue());
		refresh();

		AbstractKanbanIndexEvent event = new KanbanGreenIndexChanged(getKp().getLowerLevel_greenIndex());
		event.setProductName(getProductName());
		EventDispatcher.getEventDispatcher().notifyObservers(event);
	}//GEN-LAST:event_greenSpinnerStateChanged

	private void redSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_redSpinnerStateChanged
		getKp().setUpperLevel_red((Integer) redSpinner.getValue());
		refresh();

		AbstractKanbanIndexEvent event = new KanbanRedIndexChanged(getKp().getUpperLevel_redIndex());
		event.setProductName(getProductName());
		EventDispatcher.getEventDispatcher().notifyObservers(event);
	}//GEN-LAST:event_redSpinnerStateChanged

	private void totalKanbanSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_totalKanbanSpinnerStateChanged
		getKp().setMaxKanban((Integer) totalKanbanSpinner.getValue());
		refresh();

		AbstractKanbanIndexEvent event = new KanbanBlueIndexChanged(getKp().getMaxKanban_blueIndex());
		event.setProductName(getProductName());
		EventDispatcher.getEventDispatcher().notifyObservers(event);
	}//GEN-LAST:event_totalKanbanSpinnerStateChanged

	private void productNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productNameTextFieldActionPerformed
		setProductName(productNameTextField.getText());
	}//GEN-LAST:event_productNameTextFieldActionPerformed

	private void productNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productNameButtonActionPerformed
		productNameTextFieldActionPerformed(evt);
	}//GEN-LAST:event_productNameButtonActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton     addButton;
	private javax.swing.JSpinner    greenSpinner;
	private javax.swing.JEditorPane kanbanEditorPane;
	private javax.swing.JScrollPane kanbanScrollPane;
	private javax.swing.JButton     productNameButton;
	private javax.swing.JLabel      productNameLabel;
	private javax.swing.JTextField  productNameTextField;
	private javax.swing.JSpinner    redSpinner;
	private javax.swing.JButton     removeButton;
	private javax.swing.JSpinner    totalKanbanSpinner;
	// End of variables declaration//GEN-END:variables

	/** @return the kp */
	public KanbanPlanning getKp() {
		return kp;
	}

	/** @param event  */
	@Override
	public void notify(Event event) {
		if (event instanceof AbstractKanbanEvent) {
			AbstractKanbanEvent ake = (AbstractKanbanEvent) event;

			//Check if this component is interested
			// By default this componnent focus on it's product name (productNameTextField)
			if (ake.getProductName().equalsIgnoreCase(getProductName())) {

				if (event instanceof KanbanAdded) {
					KanbanAdded ka = (KanbanAdded) event;
					kp.setCurrentKanbanCount(ka.getKanbanCount());
					addButtonActionPerformed(null);
				} else {
					if (event instanceof KanbanRemoved) {
						KanbanRemoved kr = (KanbanRemoved) event;
						kp.setCurrentKanbanCount(kr.getKanbanCount());
						removeButtonActionPerformed(null);
					} else {
						if (event instanceof KanbanBlueIndexChanged) {
							KanbanBlueIndexChanged kbic = (KanbanBlueIndexChanged) event;
							this.totalKanbanSpinner.setValue(kbic.getBlueIndexLevel());
							refresh();
						} else {
							if (event instanceof KanbanRedIndexChanged) {
								KanbanRedIndexChanged kric = (KanbanRedIndexChanged) event;
								this.redSpinner.setValue(kric.getRedIndexLevel());
								refresh();

							} else {
								if (event instanceof KanbanGreenIndexChanged) {
									KanbanGreenIndexChanged kgic = (KanbanGreenIndexChanged) event;
									this.greenSpinner.setValue(kgic.getGreenIndexLevel());
									refresh();
								}
							}
						}
					}
				}
			}
		}
	}
}
